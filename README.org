#+title: Simply Annotate: A Lightweight Annotation System
#+author: James Dyer
#+email: captainflasmr@gmail.com
#+language: en
#+options: ':t toc:nil author:nil email:nil num:nil title:nil
#+todo: TODO DOING | DONE
#+startup: showall

#+attr_org: :width 300px
#+attr_html: :width 50%
[[file:img/simply-annotate-banner.jpg]]

Yes thats right, yet another annotation system!, in this case it is a lightweight annotation system for Emacs that allows you to add persistent notes to any text file without modifying the original content.

Still not convinced it is any different to any other note taking package in Emacs given that previous generic sparse description? Well I shall do my best to explain my own note taking ideas.  Of course this is also just a pet project to continue to learn elisp, so there is that too :)

I developed this package to fill my own perceived gap in the existing Emacs note-taking ecosystem. Although =annotate.el= comes close to what I needed, I wanted a simplified version and something with a few workflow adjustments that better suit my note taking preferences. The result is a lightweight alternative that handles annotations the way I have always wanted them to work.

The main functional aspects that I felt were important to me that generally differ from other existing Emacs annotation packages are:

- Header-line status display with keybinding reminders
- Simple intuitive workflow (hopefully)
- Multiple display styles (highlight, fringe indicators, or both)
- Annotation editing via a dedicated buffer
- Lightweight (if possible <1000 lines - [UPDATE], no its not possible, lets try <2000 lines!)
- Multi-purpose key to show/edit/toggle annotations
- Dedicated annotation buffer that can pop in and out
- Quickly step through annotations with =M-n= and =M-p=
- Buffer summary of annotations in grep-mode format
- Quickly browse through all annotated files using completing-read
- Smart action command that adapts based on context
- Threading conversations for each annotation

* Whats New

** <2025-06-20> *0.5.0*

- *Threading system*: Add replies to annotations for conversations
- *Status management*: Track progress (open, in-progress, resolved, closed)
- *Priority levels*: Set importance (low, normal, high, critical)
- *Multi-author support*: Configure team members for collaboration
- *Tag system*: Organize with hashtags (#review, #bug, #question)
- *Org-mode export*: Convert threads to structured TODO items
- *Enhanced display*: Thread info in headers and lists
- *Author management*: Flexible prompting modes and author changes

*New Key Bindings:*
- =M-s r=: Add reply to annotation
- =M-s s=: Set status
- =M-s p=: Set priority
- =M-s t=: Add tag
- =M-s a=: Change author
- =M-s A=: Reset session author
- =M-s o=: Export to org-mode

** <2025-06-20> *0.0.1*

- Basic annotation functionality
- Persistent storage
- Navigation commands
- Org-mode export
- Customizable highlighting

* Installation

** MELPA (Recommended)

#+begin_src emacs-lisp
(use-package simply-annotate
  :bind ("C-c A" . simply-annotate-mode))
#+end_src

** Manual Installation

1. Download =simply-annotate.el=
2. Place it in your Emacs =load-path=
3. Add to your configuration:

#+begin_src emacs-lisp
(require 'simply-annotate)
(global-set-key (kbd "C-c A") simply-annotate-mode)
#+end_src

* Quick Start

1. Open any file
2. Enable annotation mode: =M-x simply-annotate-mode=
3. Select/mark text and press =M-s j= to create your first annotation
4. Create some more annotations
5. Navigate with =M-n= (next) and =M-p= (previous)
6. Add replies: Press =M-s r= on any annotation to reply
7. Set status: Press =M-s s= to track progress (open/resolved/etc.)

* Usage

** Enabling Annotation Mode

#+begin_src emacs-lisp
M-x simply-annotate-mode
#+end_src

Or bind to a convenient key:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c A") 'simply-annotate-mode)
#+end_src

** Creating Annotations

*** Simple

The =M-s j= command (=simply-annotate-smart-action=) is context-aware:

1. *With region selected*: Creates new annotation or edits existing one
2. *On annotated text*: Toggles annotation buffer visibility  
3. *With prefix (C-u M-s j)*: Forces edit mode on existing annotation
4. *Elsewhere*: Creates annotation for current line
5. Enter your annotation text in the dedicated buffer
6. Save with =C-c C-c=

** Threading & Collaboration

*** Adding Replies

1. Place cursor on any annotation
2. Press =M-s r= to add a reply
3. Enter your response
4. The annotation becomes a threaded conversation

*** Status Management

- Press =M-s s= to set status: open, in-progress, resolved, closed
- Press =M-s p= to set priority: low, normal, high, critical
- Press =M-s t= to add tags like #review, #bug, #question

*** Author Management

Configure for single-user or team workflows:

#+begin_src emacs-lisp
;; Single user (default behavior)
(setq simply-annotate-prompt-for-author nil)

;; Team collaboration
(setq simply-annotate-author-list '("John Doe" "Jane Smith" "Bob Wilson"))
(setq simply-annotate-prompt-for-author 'threads-only)  ; Prompt only for replies
(setq simply-annotate-remember-author-per-file t)       ; Remember per file
#+end_src

Available prompting modes:
- =nil=: Never prompt (single-user mode)
- ='first-only=: Prompt once per session
- ='always=: Prompt for every annotation
- ='threads-only=: Prompt only for thread replies (great for reviews)

*** Author Commands

- =M-s a=: Change author of existing annotation/comment
- =M-s A=: Reset session author (forces prompt on next annotation)

** Display Styles

Simply Annotate supports three display styles:

- *Highlight*: Traditional background highlighting (default)
- *Fringe*: Shows indicators in the left fringe
- *Both*: Combines highlighting with fringe indicators

Change styles with =M-s ]= or customize =simply-annotate-display-style=.

** Viewing Annotations

When =simply-annotate-mode= is active:

- Annotated text is displayed according to your chosen style
- The header line shows annotation count, status info, and available commands
- * Thread info*: Header shows =[OPEN/HIGH:3]= for status, priority, and comment count
- Moving to annotated text shows annotation details in the header
- Press =M-s j= on annotated text to view/edit in detail

** Navigation

| Key Binding | Action                       |
|-------------+------------------------------|
| =M-n=       | Jump to next annotation      |
| =M-p=       | Jump to previous annotation  |
| =M-s j=     | Smart action (context-aware) |

** Managing Annotations

*** Creating

- Select/mark some text
- Press =M-s j= to open the annotation buffer
- Make your changes
- Save with =C-c C-c=

*** Editing

- Place cursor on annotated text
- Press =C-u M-s j= to open the annotation buffer
- Make your changes
- Save with =C-c C-c=

*** Deleting

- Place cursor on annotated text
- Press =M-s -= to remove the annotation

*** Listing All Annotations

- Press =M-s l= to open a grep-mode buffer showing all annotations in the current file
- **Enhanced display**: Shows thread status, priority, comment counts, and author info
- Click on line numbers, press =Enter= or =n/p= keys to jump directly to annotations
- Perfect for getting an overview of all your notes and their status

*** Cross-file Overview

- Press =M-s 0= to browse annotations across all files
- Select a file from the completion list
- **Statistics**: Shows annotation counts and status summaries per file
- View all annotations for that file in =grep-mode= format
- Source file is presented along with =grep-mode= list of annotations

** Org-mode Integration

Export your annotation threads to org-mode files for further processing:

- Press =M-s o= to export current buffer annotations to an org file
- Each thread becomes a TODO item with proper metadata
- Replies become sub-entries
- Status, priority, tags, and timestamps are preserved

* Key Bindings

When =simply-annotate-mode= is enabled:

| Key Binding | Command                                    | Description                          |
|-------------+--------------------------------------------+--------------------------------------|
| =M-s j=     | =simply-annotate-smart-action=             | Smart create/view/edit annotation    |
| =M-s r=     | =simply-annotate-reply-to-annotation=      | Add reply to annotation              |
| =M-s s=     | =simply-annotate-set-annotation-status=    | Set status (open/resolved)           |
| =M-s p=     | =simply-annotate-set-annotation-priority=  | Set priority (low/high)              |
| =M-s t=     | =simply-annotate-add-annotation-tag=       | Add tag (#review, #bug)              |
| =M-s a=     | =simply-annotate-change-annotation-author= | Change author                        |
| =M-s A=     | =simply-annotate-reset-session-author=     | Reset session author                 |
| =M-s o=     | =simply-annotate-export-to-org-file=       | Export to org-mode file              |
| =M-s -=     | =simply-annotate-remove=                   | Delete annotation at point           |
| =M-s l=     | =simply-annotate-list=                     | List all annotations in current file |
| =M-s 0=     | =simply-annotate-show-all=                 | Browse annotations across all files  |
| =M-s ]=     | =simply-annotate-cycle-display-style=      | Cycle through display styles         |
| =M-n=       | =simply-annotate-next=                     | Jump to next annotation              |
| =M-p=       | =simply-annotate-previous=                 | Jump to previous annotation          |

In the annotation buffer:

| Key Binding | Command                                   | Description                  |
|-------------+-------------------------------------------+------------------------------|
| =C-c C-c=   | =simply-annotate-save-annotation-buffer=  | Save changes                 |
| =C-c C-k=   | =simply-annotate-cancel-edit=             | Cancel editing               |
| =C-g=       | =simply-annotate-cancel-edit=             | Cancel editing (alternative) |
| =C-c r=     | =simply-annotate-reply-to-annotation=     | Add reply                    |
| =C-c s=     | =simply-annotate-set-annotation-status=   | Set status                   |
| =C-c p=     | =simply-annotate-set-annotation-priority= | Set priority                 |
| =C-c t=     | =simply-annotate-add-annotation-tag=      | Add tag                      |
| =C-c o=     | =simply-annotate-export-to-org-file=      | Export to org-mode           |

* Customization

** Basic Configuration

#+begin_src emacs-lisp
(use-package simply-annotate
  :custom
  ;; Customize highlight colors
  (simply-annotate-highlight-face '(:background "lightblue" :foreground "darkblue"))
  
  ;; Change annotation buffer height (fraction of frame)
  (simply-annotate-buffer-height 0.25)
  
  ;; Custom storage location
  (simply-annotate-file "~/my-annotations.el")
  
  ;; Set display style
  (simply-annotate-display-style 'both) ; 'highlight, 'fringe, or 'both
  
  ;; Customize fringe indicators
  (simply-annotate-fringe-indicator 'right-triangle)
  (simply-annotate-fringe-face 'simply-annotate-fringe-face)
  
  :bind
  ("C-c A" . simply-annotate-mode))
#+end_src

** Threading & Collaboration Configuration

#+begin_src emacs-lisp
(use-package simply-annotate
  :custom
  ;; Author configuration
  (simply-annotate-author-list '("John Doe" "Jane Smith" "Bob Wilson" "Alice Chen"))
  (simply-annotate-prompt-for-author 'threads-only)  ; Prompt only for replies
  (simply-annotate-remember-author-per-file t)       ; Remember per file
  
  ;; Customize available statuses and priorities
  (simply-annotate-thread-statuses '("open" "in-progress" "resolved" "closed"))
  (simply-annotate-priority-levels '("low" "normal" "high" "critical"))
  
  :bind
  ("C-c A" . simply-annotate-mode)
  ("C-c 0" . simply-annotate-show-all))
#+end_src

** Configuration Examples

*** Single User (Default)
#+begin_src emacs-lisp
;; Minimal setup - works like original simply-annotate
(setq simply-annotate-prompt-for-author nil)
#+end_src

*** Code Review Team
#+begin_src emacs-lisp
;; Review team setup
(setq simply-annotate-author-list '("John Reviewer" "Jane Developer" "Bob QA"))
(setq simply-annotate-prompt-for-author 'threads-only)  ; Prompt for replies only
(setq simply-annotate-remember-author-per-file t)       ; Different authors per file
#+end_src

** Display Style Options

#+begin_src emacs-lisp
;; Use only fringe indicators (good for minimal visual impact)
(setq simply-annotate-display-style 'fringe)

;; Use traditional highlighting
(setq simply-annotate-display-style 'highlight)

;; Use both for maximum visibility
(setq simply-annotate-display-style 'both)
#+end_src

** Customization Options

| Variable                                   | Default                              | Description                                     |
|--------------------------------------------+--------------------------------------+-------------------------------------------------|
| =simply-annotate-file=                     | ="~/.emacs.d/simply-annotations.el"= | File to store annotations                       |
| =simply-annotate-highlight-face=           | ='(:inherit highlight)=              | Face for highlighted annotated text             |
| =simply-annotate-buffer-name=              | ="*Annotation*"=                     | Name of the annotation display buffer           |
| =simply-annotate-buffer-height=            | =0.3=                                | Height of annotation buffer (fraction of frame) |
| =simply-annotate-display-style=            | ='fringe=                            | How to display annotations                      |
| =simply-annotate-fringe-indicator=         | ='right-triangle=                    | Symbol for fringe indicators                    |
| =simply-annotate-fringe-face=              | ='simply-annotate-fringe-face=       | Face for fringe indicators                      |
| =simply-annotate-author-list=              | =(list user-full-name)=              | List of available authors                       |
| =simply-annotate-prompt-for-author=        | =nil=                                | When to prompt for author selection             |
| =simply-annotate-remember-author-per-file= | =nil=                                | Remember author choice per file                 |
| =simply-annotate-thread-statuses=          | ='("open" "in-progress" ...)=        | Available status values                         |
| =simply-annotate-priority-levels=          | ='("low" "normal" "high" ...)=       | Available priority levels                       |

** Custom Faces

#+begin_src emacs-lisp
;; Custom highlight face for annotations
(defface my-annotation-face
  '((t :background "lightyellow" :foreground "black"))
  "Face for annotation highlights")

(setq simply-annotate-highlight-face 'my-annotation-face)

;; Custom fringe face
(defface my-fringe-face
  '((t :foreground "red" :background nil))
  "Face for fringe annotation indicators")

(setq simply-annotate-fringe-face 'my-fringe-face)
#+end_src

* Tips and Tricks

** Workflow Suggestions

Enable the mode globally if you wish for all files!
   
#+begin_src emacs-lisp
(use-package simply-annotate
  :hook
  (find-file-hook . simply-annotate-mode)
  :bind
  ("C-c A" . simply-annotate-mode)
  ("C-c 0" . simply-annotate-show-all))
#+end_src

** Smart Action Usage Patterns

- *Quick annotation*: No selection, =M-s j= to annotate current line
- *Edit existing*: =C-u M-s j= on annotated text to force edit mode
- *Toggle view*: =M-s j= on annotated text to show/hide annotation buffer
- *Region annotation*: Select text, =M-s j= to create detailed annotation

** Display Style Tips

- Use *fringe* mode for code files to minimize visual distraction
- Use *highlight* mode for documents where you want emphasis
- Use *both* mode for critical files requiring maximum attention
- Change styles on-the-fly with =M-s ]= based on current task

** Performance Notes

- Annotations are loaded on-demand per buffer
- Large numbers of annotations (100+) may slightly impact performance
- Fringe mode generally has better performance than highlight mode
- **Threading**: Complex threads (10+ replies) may slow annotation buffer rendering

* Troubleshooting

** Common Issues

*** Annotations not persisting

- Check that =simply-annotate-file= is writable
- Ensure the directory exists
- Verify threading data structure isn't corrupted

*** Highlighting not visible

- Customize =simply-annotate-highlight-face= for your color theme
- Check for conflicting overlays from other packages
- Try switching to fringe mode: =(setq simply-annotate-display-style 'fringe)=

*** Fringe indicators not showing

- Ensure your Emacs build supports fringe bitmaps
- Check that fringe is visible: =(set-window-fringes nil 8 8)=
- Try a different fringe indicator: =(setq simply-annotate-fringe-indicator 'left-triangle)=

*** Keybindings not working

- Ensure =simply-annotate-mode= is enabled
- Check for conflicting keybindings with =C-h k=
- Some thread commands only work on existing annotations

*** Smart action not behaving as expected

- Remember it's context-sensitive: behavior changes based on region selection and cursor position
- Use =C-u M-s j= to force edit mode
- Check if you're on annotated text with fringe mode enabled

*** Threading Issues

- *Author prompting not working*: Check =simply-annotate-prompt-for-author= setting
- *Thread display corrupted*: Try =M-s ]= to refresh display style
- *Replies not saving*: Ensure you're using =C-c C-c= to save
- *Wrong author selected*: Use =M-s a= to change author after creation
- *Session author stuck*: Use =M-s A= to reset session author

** Getting Help

There is a manual!, just run ~M-x info~ or ~C-h i~ and search for =simply-annotate=

* Alternative package comparison

** 1. *annotate.el*

*Pros*:
- Mature and battle-tested with extensive user base
- Sophisticated query language for filtering annotations
- Flexible annotation positioning (inline, new line, based on font size)
- Comprehensive customization options
- Support for annotation expansion macros
- Database switching functionality

*simply-annotate* differentiates by:
- *Header-line status display* - UX status and keybindings
- *Multiple display styles* - fringe indicators, highlighting, or both
- *Smart action command* - context-aware annotation management
- *Annotation buffer* - with auto-show, editing and navigation
- *Lightweight implementation* - provides core functionality

** 2. *org-annotate-file*

*Pros*:
- Full org-mode integration with all org features (outlines, babel, etc.)
- Leverages existing org-mode knowledge
- Long-standing package with proven workflow

*simply-annotate* differentiates by:
- *Visual overlay highlighting* vs text-only annotations
- *Fringe indicator option* for minimal visual impact
- *Interactive annotation buffer* that updates automatically
- *Simpler annotation format* that's less prone to corruption
- *Better multi-line support* without org-mode formatting requirements
- *More responsive user interface* with immediate visual feedback

** 3. *org-remark* (formerly org-marginalia)

*Pros*:
- Modern design with active development
- Sophisticated highlighting system with multiple highlight types
- Full org-mode integration for rich note-taking
- Good for research and academic workflows
- Support for multiple document types (PDFs, EPUBs, web pages)

*simply-annotate* differentiates by:
- *Focused on text files* rather than multi-format documents
- *Lighter weight* with faster startup and operation
- *Flexible display options* including unobtrusive fringe mode
- *Simpler annotation model* - text-centric rather than highlight-centric
- *More straightforward workflow* without requiring org-mode knowledge

** 4. *org-noter*

*Pros*:
- Excellent for PDF and document annotation workflows
- Synchronized scrolling between document and notes
- Strong academic and research focus
- Good integration with document viewers (PDF-tools, DocView, nov.el)

*simply-annotate* differentiates by:
- *General-purpose file annotation* vs document-specific workflows
- *Simpler mental model* - annotate any text file directly
- *Lightweight operation* without requiring document viewer setup
- *Better for source code* and plain text file workflows
- *More immediate annotation access* without session management
- *Project-friendly storage* that travels with files
- *Smart context-aware commands* that adapt to current situation

* Contributing

Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch
3. Add tests if applicable  
4. Submit a pull request

** Development Setup

#+begin_src emacs-lisp
;; For development, load from source
(add-to-list 'load-path "/path/to/simply-annotate")
(require 'simply-annotate)
#+end_src

* License

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

See the [[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License]] for more details.
